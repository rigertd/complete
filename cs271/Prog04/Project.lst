Microsoft (R) Macro Assembler Version 12.00.30501.0	    02/12/15 00:03:35
%Programming Assignment 4 (prog04.asm			     Page 1 - 1


				TITLE Programming Assignment 4 (prog04.asm)

				; Author: David Rigert
				; CS271 / #04                 Date: 2/11/2015
				; Description: This program prompts the user for the number of primes to display
				;              and displays that number of primes with 10 primes per line.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.const
 = 00000001			MIN_PRIME_COUNT = 1      ; minimum number of primes to display
 = 0000251C			MAX_PRIME_COUNT = 9500   ; maximum number of primes to display
 = 00000009			TAB = 9                  ; ASCII value of the tab character
 = 0000000A			NUMS_PER_ROW = 10        ; number of numbers to display per row
 = 00000016			LINES_PER_PAGE = 22      ; lines of primes to display per page

 00000000			.data
 00000000 50 72 69 6D 65	intro1    BYTE      "Prime Number Calculator     by David Rigert",13,10,13,10
	   20 4E 75 6D 62
	   65 72 20 43 61
	   6C 63 75 6C 61
	   74 6F 72 20 20
	   20 20 20 62 79
	   20 44 61 76 69
	   64 20 52 69 67
	   65 72 74 0D 0A
	   0D 0A
 0000002F  45 6E 74 65 72	          BYTE      "Enter the number of prime numbers you want to display.",13,10
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   70 72 69 6D 65
	   20 6E 75 6D 62
	   65 72 73 20 79
	   6F 75 20 77 61
	   6E 74 20 74 6F
	   20 64 69 73 70
	   6C 61 79 2E 0D
	   0A
 00000067  54 68 69 73 20	          BYTE      "This program can display up to ",0
	   70 72 6F 67 72
	   61 6D 20 63 61
	   6E 20 64 69 73
	   70 6C 61 79 20
	   75 70 20 74 6F
	   20 00
 00000087 20 70 72 69 6D	intro2    BYTE      " prime numbers.",0
	   65 20 6E 75 6D
	   62 65 72 73 2E
	   00
 00000097 4E 75 6D 62 65	prompt1   BYTE      "Number of primes [",0
	   72 20 6F 66 20
	   70 72 69 6D 65
	   73 20 5B 00
 000000AA 20 2E 2E 20 00	prompt2   BYTE      " .. ",0
 000000AF 5D 3A 20 00		prompt3   BYTE      "]: ",0
 000000B3 49 6E 76 61 6C	inputErr  BYTE      "Invalid input. Try again.",0
	   69 64 20 69 6E
	   70 75 74 2E 20
	   54 72 79 20 61
	   67 61 69 6E 2E
	   00
 000000CD 50 72 65 73 73	continue  BYTE      "Press any key to continue...",0
	   20 61 6E 79 20
	   6B 65 79 20 74
	   6F 20 63 6F 6E
	   74 69 6E 75 65
	   2E 2E 2E 00
 000000EA 54 68 61 6E 6B	goodbye   BYTE      "Thank you for playing. Goodbye.",0
	   20 79 6F 75 20
	   66 6F 72 20 70
	   6C 61 79 69 6E
	   67 2E 20 47 6F
	   6F 64 62 79 65
	   2E 00

 0000010A 00000000		primeCount     SDWORD    0    ; number of primes displayed so far
 0000010E  0000251C [		primeDivisors  DWORD     MAX_PRIME_COUNT DUP(0)
	    00000000
	   ]


 00000000			.code
 00000000			main PROC
 00000000  E8 00000016		     call displayIntro   ; display the program introduction
 00000005  E8 0000003E		     call getUserData    ; get validated number from the user and store in eax
 0000000A  E8 000000A7		     call showPrimes     ; calculate and display primes based on user input in eax
 0000000F  E8 00000187		     call farewell       ; display goodbye message

				     exit                ; exit to operating system
 00000014  6A 00	   *	    push   +000000000h
 00000016  E8 00000000 E   *	    call   ExitProcess
 0000001B			main ENDP

				;------------------------------------------------------------------------------
				; Displays the program introduction message.
				;------------------------------------------------------------------------------
 0000001B			displayIntro PROC USES eax edx
 0000001B  50		   *	    push   eax
 0000001C  52		   *	    push   edx
 0000001D  BA 00000000 R	     mov  edx, OFFSET intro1
 00000022  E8 00000000 E	     call WriteString
 00000027  B8 0000251C		     mov  eax, MAX_PRIME_COUNT
 0000002C  E8 00000000 E	     call WriteDec
 00000031  BA 00000087 R	     mov  edx, OFFSET intro2
 00000036  E8 00000000 E	     call WriteString
 0000003B  E8 00000000 E	     call Crlf
 00000040  E8 00000000 E	     call Crlf
				     ret
 00000045  5A		   *	    pop    edx
 00000046  58		   *	    pop    eax
 00000047  C3		   *	    ret    00000h
 00000048			displayIntro ENDP

				;------------------------------------------------------------------------------
				; Gets a number between MIN_PRIME_COUNT and MAX_PRIME_COUNT from the user
				; and stores it in EAX.
				; Returns:     EAX contains the user input if valid or 0 if invalid
				;------------------------------------------------------------------------------
 00000048			getUserData PROC USES edx
 00000048  52		   *	    push   edx
 00000049			getInput:
 00000049  BA 00000097 R	     mov  edx, OFFSET prompt1      ; display input prompt
 0000004E  E8 00000000 E	     call WriteString
 00000053  B8 00000001		     mov  eax, MIN_PRIME_COUNT     ; min input value
 00000058  E8 00000000 E	     call WriteDec
 0000005D  BA 000000AA R	     mov  edx, OFFSET prompt2
 00000062  E8 00000000 E	     call WriteString
 00000067  B8 0000251C		     mov  eax, MAX_PRIME_COUNT     ; max input value
 0000006C  E8 00000000 E	     call WriteDec
 00000071  BA 000000AF R	     mov  edx, OFFSET prompt3
 00000076  E8 00000000 E	     call WriteString
 0000007B  E8 00000000 E	     call ReadInt                  ; get numeric input
 00000080  E8 0000000C		     call validateNum              ; verify validity of input
 00000085  83 F8 00		     cmp  eax, 0                   ; test if input was valid
 00000088  74 BF		     je   getInput                 ; go back to beginning if invalid
 0000008A  E8 00000000 E	     call Crlf
				     ret
 0000008F  5A		   *	    pop    edx
 00000090  C3		   *	    ret    00000h
 00000091			getUserData ENDP

				;------------------------------------------------------------------------------
				; Makes sure the number in EAX is between MIN_PRIME_COUNT and MAX_PRIME_COUNT.
				; Displays an error message and sets EAX to 0 if out of range.
				; Receives:    EAX contains the number to be validated
				; Returns:     EAX contains the validated number if valid or 0 if invalid
				;------------------------------------------------------------------------------
 00000091			validateNum PROC USES edx
 00000091  52		   *	    push   edx
 00000092  83 F8 01		     cmp  eax, MIN_PRIME_COUNT     ; compare against min valid input
 00000095  7C 09		     jl   invalidInput             ; jump if eax < MIN_PRIME_COUNT
 00000097  3D 0000251C		     cmp  eax, MAX_PRIME_COUNT     ; compare against max valid input
 0000009C  7F 02		     jg   invalidInput             ; jump if eax > MAX_PRIME_COUNT
 0000009E  EB 14		     jmp  validInput               ; input was valid if execution reaches here

 000000A0			invalidInput:                      ; invalid input
 000000A0  B8 00000000		     mov  eax, 0                   ; set EAX to 0
 000000A5  BA 000000B3 R	     mov  edx, OFFSET inputErr
 000000AA  E8 00000000 E	     call WriteString              ; display error message
 000000AF  E8 00000000 E	     call Crlf
				     
 000000B4			validInput:    ; execution jumps to here if input was valid
				     ret
 000000B4  5A		   *	    pop    edx
 000000B5  C3		   *	    ret    00000h
 000000B6			validateNum ENDP

				;------------------------------------------------------------------------------
				; Displays the number of primes contained in EAX in a formatted list of
				; NUMS_PER_ROW in each row, with a "any key to continue" message every
				; LINES_PER_PAGE rows.
				; Receives:    EAX contains the number of primes to show
				;------------------------------------------------------------------------------
 000000B6			showPrimes PROC USES ebx ecx edx
 000000B6  53		   *	    push   ebx
 000000B7  51		   *	    push   ecx
 000000B8  52		   *	    push   edx
 000000B9  50			     push eax            ; save number entered by user on stack
 000000BA  8B C8		     mov  ecx, eax       ; set counter to number entered by user
 000000BC  B8 00000001		     mov  eax, 1         ; set eax to 1
 000000C1			displayPrime:
 000000C1  E8 00000068		     call getNextPrime   ; place next prime number in eax
 000000C6  E8 00000000 E	     call WriteDec       ; display prime in eax to terminal window
 000000CB  E8 00000011		     call printWhiteSpace; display tab, line feed, or Press any key message
 000000D0  E2 EF		     loop displayPrime   ; loop for number of times entered by user
 000000D2  E8 00000000 E	     call Crlf
 000000D7  E8 00000000 E	     call Crlf
 000000DC  58			     pop  eax            ; restore user input
				     ret
 000000DD  5A		   *	    pop    edx
 000000DE  59		   *	    pop    ecx
 000000DF  5B		   *	    pop    ebx
 000000E0  C3		   *	    ret    00000h
 000000E1			showPrimes ENDP

				;------------------------------------------------------------------------------
				; Prints a tab character if the current prime count is not a multiple of 10,
				; or a line feed if it is a multiple of 10. Also prints a "any key to continue"
				; message after displaying LINES_PER_PAGE rows.
				; Receives:    primeCount contains the number of primes printed so far
				;------------------------------------------------------------------------------
 000000E1			printWhiteSpace PROC USES eax ebx edx
 000000E1  50		   *	    push   eax
 000000E2  53		   *	    push   ebx
 000000E3  52		   *	    push   edx
 000000E4  A1 0000010A R	     mov  eax,primeCount ; copy number displayed so far to eax
 000000E9  99			     cdq                 ; zero out edx
 000000EA  BB 0000000A		     mov  ebx, NUMS_PER_ROW
 000000EF  F7 F3		     div  ebx            ; divide by number of primes to display per row
 000000F1  83 FA 00		     cmp  edx, 0         ; test if multiple of 10 by remainder of 0
 000000F4  75 07		     jne  not10th        ; jump if not a multiple of 10
 000000F6  E8 00000000 E	     call Crlf           ; print line feed if multiple of 10
 000000FB  EB 07		     jmp  anyKeyTest     ; test if Press any key message is required

 000000FD			not10th:     
 000000FD  E8 0000008F		     call printTab       ; display a tab character
 00000102  EB 26		     jmp  endWhiteSpace  ; done with whitespace

 00000104			anyKeyTest:    ; now test if multiple of NUMS_PER_ROW * LINES_PER_PAGE
 00000104  A1 0000010A R	     mov  eax,primeCount ; copy number displayed so far to eax
 00000109  99			     cdq                 ; zero out edx
 0000010A  BB 000000DC		     mov  ebx, NUMS_PER_ROW * LINES_PER_PAGE
 0000010F  F7 F3		     div  ebx            ; divide by NUMS_PER_ROW * LINES_PER_PAGE
 00000111  83 FA 00		     cmp  edx, 0         ; test if multiple by remainder
 00000114  75 14		     jne  endWhiteSpace  ; jump to end if not a multiple
 00000116  BA 000000CD R	     mov  edx, OFFSET continue
 0000011B  E8 00000000 E	     call WriteString    ; display Press any key message
 00000120  E8 00000000 E	     call ReadChar       ; block until any key is pressed
 00000125  E8 00000000 E	     call Crlf           ; display another line feed
				     
 0000012A			endWhiteSpace:
				     ret
 0000012A  5A		   *	    pop    edx
 0000012B  5B		   *	    pop    ebx
 0000012C  58		   *	    pop    eax
 0000012D  C3		   *	    ret    00000h
 0000012E			printWhiteSpace ENDP

				;------------------------------------------------------------------------------
				; Gets the next prime number after the value in EAX.
				; Receives:    EAX contains the current prime number
				; Returns:     EAX contains the next prime number
				;------------------------------------------------------------------------------
 0000012E			getNextPrime PROC
 0000012E			tryNext:
 0000012E  40			     inc  eax
 0000012F  E8 00000006		     call isPrime
 00000134  83 FB 00		     cmp  ebx, 0         ; test if number is prime
 00000137  74 F5		     je   tryNext        ; try next number if ebx=0 (isPrime is false)
 00000139  C3			     ret                 ; number in eax is prime
 0000013A			getNextPrime ENDP

				;------------------------------------------------------------------------------
				; Tests whether the number in EAX is prime by dividing it by every number in primeDivisors.
				; If it is, stores it in the primeDivisors array and increments primeCount.
				; Receives:    EAX contains the number to test
				; Returns:     EBX is set to 1 if the number is prime, or 0 if it is not.
				;------------------------------------------------------------------------------
 0000013A			isPrime PROC USES ecx edx esi edi
 0000013A  51		   *	    push   ecx
 0000013B  52		   *	    push   edx
 0000013C  56		   *	    push   esi
 0000013D  57		   *	    push   edi
 0000013E  50			     push eax            ; save number being tested on stack
 0000013F  83 F8 01		     cmp  eax, 1         ; test if number <= 1
 00000142  7E 2A		     jle  notPrime       ; return not prime if <= 1
 00000144  83 F8 02		     cmp  eax, 2         ; test if number is 2
 00000147  74 2C		     je   prime          ; number is prime if 2
 00000149  8B 3D 0000010A R	     mov  edi,primeCount ; otherwise try to divide by numbers in primeDivisors
				     
 0000014F			tryDivide:
 0000014F  8B 04 24		     mov  eax, [esp]     ; put original number back into eax
 00000152  99			     cdq                 ; zero out edx
 00000153  4F			     dec  edi            ; decrement array index
 00000154  8B 1C BD		     mov  ebx, primeDivisors[edi*4]     ; copy prime divisor to ebx
	   0000010E R
 0000015B  F7 F3		     div  ebx            ; divide number by prime divisor
 0000015D  83 FA 00		     cmp  edx, 0         ; test if remainder is 0
 00000160  74 0C		     je   notPrime       ; return not prime if remainder is 0
 00000162  83 FF 00		     cmp  edi, 0         ; test if first element of array was reached
 00000165  7F E8		     jg   tryDivide      ; repeat divide loop with new counter value
				     
				     ; number is prime if execution reaches here
 00000167  BB 00000001		     mov  ebx, 1         ; set ebx to 1 (true) if prime
 0000016C  EB 07		     jmp  prime

 0000016E			notPrime:
 0000016E  BB 00000000		     mov  ebx, 0         ; set ebx to 0 (false) if not prime
 00000173  EB 16		     jmp  endPrime       ; jump to end of procedure
				     
 00000175			prime:
 00000175  8B 35 0000010A R	     mov  esi,primeCount ; index to store result at in primeDivisors array
 0000017B  8B 04 24		     mov  eax, [esp]     ; copy original number back into eax
 0000017E  89 04 B5		     mov  primeDivisors[esi*4], eax     ; save prime to primeDivisors array
	   0000010E R
 00000185  FF 05 0000010A R	     inc  primeCount     ; increment the prime counter

 0000018B			endPrime:
 0000018B  58			     pop  eax; restore number
				     ret
 0000018C  5F		   *	    pop    edi
 0000018D  5E		   *	    pop    esi
 0000018E  5A		   *	    pop    edx
 0000018F  59		   *	    pop    ecx
 00000190  C3		   *	    ret    00000h
 00000191			isPrime ENDP

				;------------------------------------------------------------------------------
				; Prints a tab character to the terminal window.
				;------------------------------------------------------------------------------
 00000191			printTab PROC USES eax
 00000191  50		   *	    push   eax
 00000192  B0 09		     mov  al, TAB
 00000194  E8 00000000 E	     call WriteChar      ; display tab character
				     ret
 00000199  58		   *	    pop    eax
 0000019A  C3		   *	    ret    00000h
 0000019B			printTab ENDP

				;------------------------------------------------------------------------------
				; Prints the goodbye message to the terminal window.
				;------------------------------------------------------------------------------
 0000019B			farewell PROC USES edx
 0000019B  52		   *	    push   edx
 0000019C  BA 000000EA R	     mov  edx, OFFSET goodbye
 000001A1  E8 00000000 E	     call WriteString
 000001A6  E8 00000000 E	     call Crlf
				     ret
 000001AB  5A		   *	    pop    edx
 000001AC  C3		   *	    ret    00000h
 000001AD			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    02/12/15 00:03:35
%Programming Assignment 4 (prog04.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CONST  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'CONST'	 ReadOnly
FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000957E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001AD Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayIntro . . . . . . . . . .	P Near	 0000001B _TEXT	Length= 0000002D Public STDCALL
farewell . . . . . . . . . . . .	P Near	 0000019B _TEXT	Length= 00000012 Public STDCALL
getNextPrime . . . . . . . . . .	P Near	 0000012E _TEXT	Length= 0000000C Public STDCALL
  tryNext  . . . . . . . . . . .	L Near	 0000012E _TEXT	
getUserData  . . . . . . . . . .	P Near	 00000048 _TEXT	Length= 00000049 Public STDCALL
  getInput . . . . . . . . . . .	L Near	 00000049 _TEXT	
isPrime  . . . . . . . . . . . .	P Near	 0000013A _TEXT	Length= 00000057 Public STDCALL
  tryDivide  . . . . . . . . . .	L Near	 0000014F _TEXT	
  notPrime . . . . . . . . . . .	L Near	 0000016E _TEXT	
  prime  . . . . . . . . . . . .	L Near	 00000175 _TEXT	
  endPrime . . . . . . . . . . .	L Near	 0000018B _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001B Public STDCALL
printTab . . . . . . . . . . . .	P Near	 00000191 _TEXT	Length= 0000000A Public STDCALL
printWhiteSpace  . . . . . . . .	P Near	 000000E1 _TEXT	Length= 0000004D Public STDCALL
  not10th  . . . . . . . . . . .	L Near	 000000FD _TEXT	
  anyKeyTest . . . . . . . . . .	L Near	 00000104 _TEXT	
  endWhiteSpace  . . . . . . . .	L Near	 0000012A _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showPrimes . . . . . . . . . . .	P Near	 000000B6 _TEXT	Length= 0000002B Public STDCALL
  displayPrime . . . . . . . . .	L Near	 000000C1 _TEXT	
validateNum  . . . . . . . . . .	P Near	 00000091 _TEXT	Length= 00000025 Public STDCALL
  invalidInput . . . . . . . . .	L Near	 000000A0 _TEXT	
  validInput . . . . . . . . . .	L Near	 000000B4 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LINES_PER_PAGE . . . . . . . . .	Number	 00000016h   
MAX_PRIME_COUNT  . . . . . . . .	Number	 0000251Ch   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN_PRIME_COUNT  . . . . . . . .	Number	 00000001h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUMS_PER_ROW . . . . . . . . . .	Number	 0000000Ah   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
continue . . . . . . . . . . . .	Byte	 000000CD _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000000EA _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputErr . . . . . . . . . . . .	Byte	 000000B3 _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000087 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
primeCount . . . . . . . . . . .	DWord	 0000010A _DATA	
primeDivisors  . . . . . . . . .	DWord	 0000010E _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000097 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 000000AA _DATA	
prompt3  . . . . . . . . . . . .	Byte	 000000AF _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
