#!/bin/bash

# Trap to clean up temp file if program interrupted
trap "{ rm -f temp$$* ; exit 1; }" INT HUP TERM

# name of script
name=`basename "$0"`

# Function to display usage instuctions to stdout and stderr
echo_usage () {
	echo "Usage: $name {-rows|-cols} [file]" >&2
}

# Display usage and exit with error if rows or columns not specified
[[ $1 != -r* ]] && [[ $1 != -c* ]] && echo_usage && exit 1

# Display usage and exit with error if too many arguments specified
[ $# -gt 2 ] && echo_usage && exit 1

# Display error to stdout and stderr and exit if file not found or unreadable
[ ! -r $2 ] && echo "$name: cannot read $2" >&2 && exit 1

# Store the mean and median for each col/row in an array
means=()
medians=()

# Read first line of specified file or stdin to count columns
read -r line <"${2:-/dev/stdin}"
colCount=`echo $line | wc -w`

# Create an empty temp file
>"temp$$"

# Read stdin or specified file and write to temp file
while read -r line
do
	echo "$line" >> "temp$$"
done <"${2:-/dev/stdin}"

# Transpose array if -col is specified
if [[ $1 == -c* ]]
then
	counter=0
	# Create empty file in case one already exists
	echo "" > "temp$$t"
	# Cut each column and paste as a row
	while [ $counter -lt $colCount ]
	do
		((counter++))
		cat "temp$$" | cut -f$counter | paste -s  >> "temp$$t"
	done
	rm -f "temp$$"
	mv "temp$$t" "temp$$"
fi

# Read the temp file line by line
while read -r line
do
	# Sort the values in ascending order and create array
	declare -a vals=( $( echo "$line" | grep '[0-9]+' -E -o | sort -n ) )

	# Skip line if array length is 0
	[ ${#vals[@]} -eq 0 ] && continue

	lineSum=0

	# Find the sum of all values on the current line
	for val in ${vals[@]}
	do
		let "lineSum += $val"
	done

	# Calculate the mean and round by shifting decimal by 1 and adding 5
	mean=$(( ( (lineSum * 10 / ${#vals[@]}) + 5) / 10  ))
	means+=($mean)

	# Find the median. Array is sorted so second is always larger 
	idx=$(( ${#vals[@]} / 2 ))
	median=${vals[$idx]}
	medians+=($median)
done < "temp$$" # Read from temp file

# Display the means and medians
if [[ $1 == -c* ]]
then
	# By column if -cols option
	echo Averages:
	paste -s <(printf "%s\n" "${means[@]}")
	echo Medians:
	paste -s <(printf "%s\n" "${medians[@]}")
else
	# By row if -rows option
	echo -e "Average\tMedian"
	# Print each element on its own line and combine arrays using paste
	# stackoverflow.com/questions/27231477/bash-for-loop-multiple-arrays
	paste <(printf "%s\n" "${means[@]}") <(printf "%s\n" "${medians[@]}")
fi

# Clean up temp file
rm -f temp$$* && exit 0

